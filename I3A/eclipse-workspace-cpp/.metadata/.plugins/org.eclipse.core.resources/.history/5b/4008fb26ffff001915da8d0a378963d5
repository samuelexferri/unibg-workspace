#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "ListaInt.h"

struct ListInt {
	int * data;
	int freePos; // Indica la prima posizione libera in data
};

ListIntRef mkList(int N) {
	ListIntRef li = malloc(sizeof(struct ListInt));
	li->data = malloc(sizeof(int) * N); // SarÃ  da deallocare anch'essa
	li->freePos = 0;
	return li;
}

void aggiungi(ListIntRef li, int i) {
	*(li->data + (li->freePos)) = i;
	//(li + (li->freePos))->data = i;
	(li->freePos)++;
}

char* toString(ListIntRef li) {
	if (li->freePos == 0) {
		return "Vuoto";
	}

	char * buffer = malloc(sizeof(char) * 10000);

	printf("Buffer YYY (Function): [%s] \n", buffer);

	for (int i = 0; i < li->freePos; i++) {
		char buffertemp[1000];
		sprintf(buffertemp, "%d ", *(li->data + i));
		strcat(buffer, buffertemp);
		printf("Buffer XXX(Function): [%s] \n", buffer);
	}

	printf("Buffer (Function): [%s] \n", buffer);

	return buffer;


	/*

	char buffer1[10]; // Numero grande random
	char buffer2[2000]; // Numero grande random

	for (int i = 0; i < li->freePos; i++) {
		int place = (li + i)->data;

		sprintf(buffer1, "%d ", place);
		strcat(buffer2, buffer1);
	}

	char *buffer3 = malloc(sizeof(char) * 2000); // Numero grande random
	buffer3 = buffer2;

	printf("Buffer (Function): [%s] \n", buffer3);

	return buffer3;
	*/
}

void freeList(ListIntRef *l) {
	free((*l)->data); // Libero anche il puntatore a data; nel costruttore avevo usato due malloc!
	free(*l);
	*l = NULL;
}
