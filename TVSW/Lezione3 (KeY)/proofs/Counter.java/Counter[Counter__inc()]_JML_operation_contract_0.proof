\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Thu Jun 11 13:02:11 CEST 2020
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]useUninterpretedMultiplication=true
[SMTSettings]SelectedTaclets=
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_NONE
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[Strategy]Timeout=-1
[Strategy]MaximumNumberOfAutomaticApplications=10000
[SMTSettings]integersMaximum=2147483645
[Choice]DefaultChoices=assertions-assertions\\:on , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , programRules-programRules\\:Java , runtimeExceptions-runtimeExceptions\\:allow , JavaCard-JavaCard\\:off , Strings-Strings\\:on , modelFields-modelFields\\:showSatisfiability , bigint-bigint\\:on , sequences-sequences\\:on , moreSeqRules-moreSeqRules\\:off , reach-reach\\:on , integerSimplificationRules-integerSimplificationRules\\:full , permissions-permissions\\:off , wdOperator-wdOperator\\:L , wdChecks-wdChecks\\:off , joinGenerateIsWeakeningGoal-joinGenerateIsWeakeningGoal\\:off
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_NONCLOSE
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]maxGenericSorts=2
[SMTSettings]integersMinimum=-2147483645
[SMTSettings]invariantForall=false
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
"
}

\javaSource "../../src";

\proofObligation "#Proof Obligation Settings
#Thu Jun 11 13:02:11 CEST 2020
name=Counter[Counter\\:\\:inc()].JML operation contract.0
contract=Counter[Counter\\:\\:inc()].JML operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "samuelexferri" ) (keyVersion "cf2b4245b92fe9df2d6b7bd158dd83ee7308d9a6"))
(keyLog "1" (keyUser "samuelexferri" ) (keyVersion "19f0b8c2a4fe689cd76be6cd1753b36e2e825a89"))

(autoModeTime "978")

(branch "dummy ID"
(rule "instanceof_static_type" (formula "1") (term "0,0,0,1,1,0,0,1,1") (newnames "self,result,exc,heapAtPre,o,f"))
(rule "boolean_equal" (formula "1") (term "0,0,1,1,0,0,1,1"))
(rule "concrete_impl_1" (formula "1") (term "0,1,1,0,0,1,1"))
(rule "elementOfAllLocs" (formula "1") (term "0,0,0,0,1,0,1,1"))
(rule "concrete_or_1" (formula "1") (term "0,0,0,1,0,1,1"))
(rule "concrete_or_1" (formula "1") (term "0,0,1,0,1,1"))
(rule "translateJavaAddInt" (formula "1") (term "1,0,1,0,0,0,1,1"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "polySimp_homoEq" (formula "7") (term "0,1,0,0,0,1"))
(rule "polySimp_addComm0" (formula "7") (term "0,0,0,1,0,0,0,1"))
(rule "polySimp_addComm1" (formula "7") (term "0,0,1,0,0,0,1"))
(rule "inEqSimp_gtToGeq" (formula "7") (term "0,1,1,0,0,0,1"))
(rule "mul_literals" (formula "7") (term "1,0,0,0,1,1,0,0,0,1"))
(rule "add_literals" (formula "7") (term "0,0,0,1,1,0,0,0,1"))
(rule "assignment" (formula "7") (term "1"))
(rule "sequentialToParallel2" (formula "7"))
(rule "simplifyUpdate3" (formula "7") (term "1,0"))
(rule "polySimp_sepPosMonomial" (formula "7") (term "0,1,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "7") (term "1,0,1,0,0,0,1"))
(rule "polySimp_rightDist" (formula "7") (term "1,0,1,0,0,0,1"))
(rule "mul_literals" (formula "7") (term "0,1,0,1,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "7") (term "1,1,0,1,0,0,0,1"))
(rule "polySimp_elimOne" (formula "7") (term "1,1,0,1,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial1" (formula "7") (term "0,1,1,0,0,0,1"))
(rule "mul_literals" (formula "7") (term "1,0,1,1,0,0,0,1"))
(rule "all_unused" (formula "7") (term "0,1,0,1"))
(rule "all_unused" (formula "7") (term "1,0,1"))
(rule "concrete_and_3" (formula "7") (term "0,1"))
(rule "Class_invariant_axiom_for_Counter" (formula "5") (inst "sk=sk_0") (ifseqformula "3"))
(branch "Use Axiom"
   (rule "methodBodyExpand" (formula "7") (term "1") (newnames "heapBefore_inc,savedHeapBefore_inc"))
   (rule "simplifyUpdate2" (formula "7") (term "1"))
   (rule "returnUnfold" (formula "7") (term "1") (inst "#v0=x"))
   (rule "variableDeclarationAssign" (formula "7") (term "1"))
   (rule "variableDeclaration" (formula "7") (term "1") (newnames "x"))
   (rule "preincrement_assignment_attribute" (formula "7") (term "1") (inst "#v=c"))
   (rule "variableDeclarationAssign" (formula "7") (term "1"))
   (rule "variableDeclaration" (formula "7") (term "1") (newnames "c"))
   (rule "assignment" (formula "7") (term "1"))
   (rule "sequentialToParallel2" (formula "7"))
   (rule "simplifyUpdate3" (formula "7") (term "1,0"))
   (rule "eval_order_access4" (formula "7") (term "1") (inst "#v0=c_1") (inst "#v1=x_1"))
   (rule "variableDeclarationAssign" (formula "7") (term "1"))
   (rule "variableDeclaration" (formula "7") (term "1") (newnames "c_1"))
   (rule "assignment" (formula "7") (term "1"))
   (builtin "One Step Simplification" (formula "7"))
   (rule "variableDeclarationAssign" (formula "7") (term "1"))
   (rule "variableDeclaration" (formula "7") (term "1") (newnames "x_1"))
   (rule "compound_int_cast_expression" (formula "7") (term "1") (inst "#v=x_2"))
   (rule "variableDeclarationAssign" (formula "7") (term "1"))
   (rule "variableDeclaration" (formula "7") (term "1") (newnames "x_2"))
   (rule "remove_parentheses_right" (formula "7") (term "1"))
   (rule "compound_addition_1" (formula "7") (term "1") (inst "#v=x_3"))
   (rule "variableDeclarationAssign" (formula "7") (term "1"))
   (rule "variableDeclaration" (formula "7") (term "1") (newnames "x_3"))
   (rule "assignment_read_attribute" (formula "7") (term "1"))
   (branch "Normal Execution (c != null)"
      (builtin "One Step Simplification" (formula "8"))
      (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "6")))
      (rule "false_right" (formula "7"))
      (rule "assignmentAdditionInt" (formula "7") (term "1"))
      (builtin "One Step Simplification" (formula "7"))
      (rule "translateJavaAddInt" (formula "7") (term "0,1,0"))
      (rule "polySimp_addComm0" (formula "7") (term "0,1,0"))
      (rule "widening_identity_cast_5" (formula "7") (term "1"))
      (rule "assignment" (formula "7") (term "1"))
      (builtin "One Step Simplification" (formula "7"))
      (rule "assignment_write_attribute" (formula "7") (term "1"))
      (branch "Normal Execution (c_1 != null)"
         (builtin "One Step Simplification" (formula "8"))
         (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "6")))
         (rule "false_right" (formula "7"))
         (rule "assignment_read_attribute" (formula "7") (term "1"))
         (branch "Normal Execution (c != null)"
            (builtin "One Step Simplification" (formula "8"))
            (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "6")))
            (rule "false_right" (formula "7"))
            (rule "pullOutSelect" (formula "7") (term "0,1,0") (inst "selectSK=Counter_count_0"))
            (rule "simplifySelectOfStore" (formula "1"))
            (builtin "One Step Simplification" (formula "1"))
            (rule "castDel" (formula "1") (term "0"))
            (rule "applyEqReverse" (formula "8") (term "0,1,0") (ifseqformula "1"))
            (rule "hideAuxiliaryEq" (formula "1"))
            (rule "methodCallReturn" (formula "7") (term "1"))
            (rule "assignment" (formula "7") (term "1"))
            (builtin "One Step Simplification" (formula "7"))
            (rule "methodCallEmpty" (formula "7") (term "1"))
            (rule "tryEmpty" (formula "7") (term "1"))
            (rule "emptyModality" (formula "7") (term "1"))
            (builtin "One Step Simplification" (formula "7"))
            (rule "replaceKnownSelect_taclet0000_0" (formula "7") (term "0,0,1"))
            (rule "replaceKnownSelect_taclet0000_0" (formula "7") (term "1,1,0"))
            (rule "replaceKnownAuxiliaryConstant_taclet0000_1" (formula "7") (term "0,0,1"))
            (rule "replaceKnownAuxiliaryConstant_taclet0000_1" (formula "7") (term "1,1,0"))
            (rule "polySimp_addAssoc" (formula "7") (term "1,0"))
            (rule "add_literals" (formula "7") (term "0,1,0"))
            (rule "add_zero_left" (formula "7") (term "1,0"))
            (builtin "One Step Simplification" (formula "7"))
            (rule "inEqSimp_homoInEq1" (formula "7") (term "0"))
            (rule "polySimp_mulComm0" (formula "7") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "7") (term "1,0,0"))
            (rule "mul_literals" (formula "7") (term "0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "7") (term "0,0"))
            (rule "add_literals" (formula "7") (term "0,0,0"))
            (rule "add_zero_left" (formula "7") (term "0,0"))
            (rule "inEqSimp_invertInEq0" (formula "7") (term "0"))
            (rule "polySimp_mulLiterals" (formula "7") (term "0,0"))
            (rule "times_zero_2" (formula "7") (term "1,0"))
            (rule "polySimp_elimOne" (formula "7") (term "0,0"))
            (rule "replace_known_left" (formula "7") (term "0") (ifseqformula "5"))
            (builtin "One Step Simplification" (formula "7"))
            (rule "Class_invariant_axiom_for_Counter" (formula "7") (inst "sk=sk_1") (ifseqformula "3"))
            (branch "Use Axiom"
               (rule "replaceKnownSelect_taclet0000_0" (formula "7") (term "0"))
               (rule "replaceKnownAuxiliaryConstant_taclet0000_1" (formula "7") (term "0"))
               (rule "inEqSimp_geqRight" (formula "7"))
               (rule "times_zero_1" (formula "1") (term "1,0,0"))
               (rule "add_zero_right" (formula "1") (term "0,0"))
               (rule "polySimp_addAssoc" (formula "1") (term "0"))
               (rule "add_literals" (formula "1") (term "0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "1"))
               (rule "mul_literals" (formula "1") (term "1"))
               (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "6"))
               (rule "qeq_literals" (formula "1") (term "0"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "closeFalse" (formula "1"))
            )
            (branch "Show Axiom Satisfiability"
               (builtin "One Step Simplification" (formula "7"))
               (rule "closeTrue" (formula "7"))
            )
         )
         (branch "Null Reference (c = null)"
            (builtin "One Step Simplification" (formula "8"))
            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "7")))
            (rule "closeFalse" (formula "1"))
         )
      )
      (branch "Null Reference (c_1 = null)"
         (builtin "One Step Simplification" (formula "8"))
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "7")))
         (rule "closeFalse" (formula "1"))
      )
   )
   (branch "Null Reference (c = null)"
      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "7")))
      (rule "closeFalse" (formula "1"))
   )
)
(branch "Show Axiom Satisfiability"
   (rule "concrete_eq_1" (formula "6") (term "0"))
   (rule "concrete_eq_2" (formula "6") (term "1"))
   (rule "neq_or" (formula "6"))
   (rule "closeTrue" (formula "6"))
)
)

}
