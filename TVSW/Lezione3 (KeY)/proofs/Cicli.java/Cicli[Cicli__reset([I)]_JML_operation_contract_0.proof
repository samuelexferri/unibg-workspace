\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Tue Apr 07 16:54:30 CEST 2020
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]useUninterpretedMultiplication=true
[SMTSettings]SelectedTaclets=
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_EXPAND
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_ON
[Strategy]Timeout=-1
[Strategy]MaximumNumberOfAutomaticApplications=10000
[SMTSettings]integersMaximum=2147483645
[Choice]DefaultChoices=assertions-assertions\\:on , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , programRules-programRules\\:Java , runtimeExceptions-runtimeExceptions\\:allow , JavaCard-JavaCard\\:off , Strings-Strings\\:on , modelFields-modelFields\\:showSatisfiability , bigint-bigint\\:on , sequences-sequences\\:on , moreSeqRules-moreSeqRules\\:off , reach-reach\\:on , integerSimplificationRules-integerSimplificationRules\\:full , wdOperator-wdOperator\\:L , wdChecks-wdChecks\\:off
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_NONCLOSE
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]maxGenericSorts=2
[SMTSettings]integersMinimum=-2147483645
[SMTSettings]invariantForall=false
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
"
}

\javaSource "../../src";

\proofObligation "#Proof Obligation Settings
#Tue Apr 07 16:54:30 CEST 2020
name=Cicli[Cicli\\:\\:reset([I)].JML operation contract.0
contract=Cicli[Cicli\\:\\:reset([I)].JML operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "samuelexferri" ) (keyVersion "cf2b4245b92fe9df2d6b7bd158dd83ee7308d9a6"))
(keyLog "1" (keyUser "samuelexferri" ) (keyVersion "cf2b4245b92fe9df2d6b7bd158dd83ee7308d9a6"))

(autoModeTime "2135")

(branch "dummy ID"
(rule "instanceof_static_type" (formula "1") (term "0,0,0,1,1,0,0,1,1") (newnames "heapAtPre"))
(rule "boolean_equal" (formula "1") (term "0,0,1,1,0,0,1,1"))
(rule "concrete_impl_1" (formula "1") (term "0,1,1,0,0,1,1"))
(rule "elementOfAllLocs" (formula "1") (term "0,0,0,0,1,0,1,1"))
(rule "concrete_or_1" (formula "1") (term "0,0,0,1,0,1,1"))
(rule "concrete_or_1" (formula "1") (term "0,0,1,0,1,1"))
(rule "inInt" (formula "1") (term "1,0,0,0,1,0,0,0,1,1"))
(rule "concrete_and_3" (formula "1") (term "0,0,0,1,0,0,0,1,1"))
(rule "simplifyUpdate2" (formula "1") (term "1"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "4"))
(rule "notLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "replace_known_right" (formula "4") (term "0") (ifseqformula "8"))
(rule "concrete_or_2" (formula "4"))
(rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0,0,1,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0,0,1,0,0,0,1"))
(rule "assignment" (formula "9") (term "1"))
(rule "sequentialToParallel2" (formula "9"))
(rule "simplifyUpdate3" (formula "9") (term "1,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0,0,1,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0,0,1,0,0,0,1"))
(rule "polySimp_rightDist" (formula "9") (term "1,1,0,0,0,1,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0,0,1,0,0,0,1"))
(rule "mul_literals" (formula "9") (term "0,1,1,0,0,0,1,0,0,0,1"))
(rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0,0,1,0,0,0,1"))
(rule "all_unused" (formula "9") (term "0,1,0,1"))
(rule "all_unused" (formula "9") (term "1,0,1"))
(rule "concrete_and_3" (formula "9") (term "0,1"))
(rule "nnf_imp2or" (formula "9") (term "0,0,1,0,0,1"))
(rule "nnf_notAnd" (formula "9") (term "0,0,0,1,0,0,1"))
(rule "inEqSimp_notLeq" (formula "9") (term "1,0,0,0,1,0,0,1"))
(rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,0,0,1,0,0,1"))
(rule "mul_literals" (formula "9") (term "0,1,0,0,1,0,0,0,1,0,0,1"))
(rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,0,0,1,0,0,1"))
(rule "add_literals" (formula "9") (term "0,0,0,1,0,0,0,1,0,0,1"))
(rule "add_zero_left" (formula "9") (term "0,0,1,0,0,0,1,0,0,1"))
(rule "inEqSimp_sepPosMonomial1" (formula "9") (term "1,0,0,0,1,0,0,1"))
(rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0,0,1,0,0,1"))
(rule "polySimp_elimOne" (formula "9") (term "1,1,0,0,0,1,0,0,1"))
(rule "inEqSimp_notGeq" (formula "9") (term "0,0,0,0,1,0,0,1"))
(rule "times_zero_1" (formula "9") (term "1,0,0,0,0,0,0,1,0,0,1"))
(rule "add_zero_right" (formula "9") (term "0,0,0,0,0,0,1,0,0,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0,0,1,0,0,1"))
(rule "mul_literals" (formula "9") (term "1,0,0,0,0,1,0,0,1"))
(rule "Class_invariant_axiom_for_Cicli" (formula "6") (inst "sk=sk_0") (ifseqformula "3"))
(branch "Use Axiom"
   (rule "true_left" (formula "6"))
   (rule "methodBodyExpand" (formula "8") (term "1") (newnames "heapBefore_reset,savedHeapBefore_reset,_aBefore_reset"))
   (rule "simplifyUpdate2" (formula "8") (term "1"))
   (rule "for_to_while" (formula "8") (term "1") (inst "#innerLabel=_label0") (inst "#outerLabel=_label1"))
   (rule "variableDeclarationAssign" (formula "8") (term "1"))
   (rule "variableDeclaration" (formula "8") (term "1") (newnames "i"))
   (rule "assignment" (formula "8") (term "1"))
   (rule "sequentialToParallel2" (formula "8"))
   (rule "simplifyUpdate3" (formula "8") (term "1,0"))
   (builtin "Loop Invariant" (formula "8") (newnames "variant,b,heapBefore_LOOP,iBefore_LOOP,i_0,heap_After_LOOP,anon_heap_LOOP,o,f"))
   (branch "Invariant Initially Valid"
      (rule "inInt" (formula "8") (term "1,0,0,0,1"))
      (rule "concrete_and_3" (formula "8") (term "0,0,0,1"))
      (rule "simplifyUpdate2" (formula "8"))
      (rule "applyOnRigidFormula" (formula "8"))
      (rule "simplifyUpdate2" (formula "8") (term "1"))
      (rule "replace_known_left" (formula "8") (term "1") (ifseqformula "1"))
      (rule "concrete_and_3" (formula "8"))
      (rule "allRight" (formula "8") (inst "sk=j_1"))
      (rule "impRight" (formula "8"))
      (rule "simplifyUpdate2" (formula "1"))
      (rule "simplifyUpdate2" (formula "9"))
      (rule "andLeft" (formula "1"))
      (rule "simplifyUpdate2" (formula "1"))
      (rule "applyOnRigidFormula" (formula "10"))
      (rule "simplifyUpdate1" (formula "10") (term "1"))
      (rule "applyOnRigidFormula" (formula "2"))
      (rule "applyOnPV" (formula "2") (term "1"))
      (rule "simplifyUpdate1" (formula "2") (term "0"))
      (rule "applyOnRigidTerm" (formula "10") (term "0"))
      (rule "simplifyUpdate1" (formula "10") (term "2,0"))
      (rule "simplifyUpdate1" (formula "10") (term "0,0"))
      (rule "applyOnPV" (formula "10") (term "1,0"))
      (rule "inEqSimp_ltToLeq" (formula "2"))
      (rule "times_zero_1" (formula "2") (term "1,0,0"))
      (rule "add_zero_right" (formula "2") (term "0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "2"))
      (rule "mul_literals" (formula "2") (term "1"))
      (rule "inEqSimp_contradInEq1" (formula "2") (ifseqformula "1"))
      (rule "qeq_literals" (formula "2") (term "0"))
      (rule "concrete_and_2" (formula "2"))
      (rule "closeFalse" (formula "2"))
   )
   (branch "Body Preserves Invariant"
      (rule "inInt" (formula "7") (term "1,1,1"))
      (rule "concrete_and_3" (formula "7") (term "1,1"))
      (rule "inInt" (formula "7") (term "1,0,0,1,1"))
      (rule "concrete_and_3" (formula "7") (term "0,0,1,1"))
      (rule "inInt" (formula "10") (term "1,0,0,0,1,1,0,1,1,1,1"))
      (rule "concrete_and_3" (formula "10") (term "0,0,0,1,1,0,1,1,1,1"))
      (rule "elementOfAllLocs" (formula "10") (term "0,0,0,0,1,1,1,0,1,1,1,1"))
      (rule "concrete_or_1" (formula "10") (term "0,0,0,1,1,1,0,1,1,1,1"))
      (rule "concrete_or_1" (formula "10") (term "0,0,1,1,1,0,1,1,1,1"))
      (rule "simplifyUpdate2" (formula "7"))
      (rule "simplifyUpdate2" (formula "10") (term "1"))
      (rule "sequentialToParallel2" (formula "7"))
      (rule "simplifyUpdate2" (formula "7"))
      (rule "simplifyUpdate3" (formula "7") (term "1,0"))
      (rule "sequentialToParallel2" (formula "10"))
      (rule "simplifyUpdate2" (formula "10"))
      (rule "simplifyUpdate3" (formula "10") (term "1,0"))
      (rule "impRight" (formula "10"))
      (rule "simplifyUpdate2" (formula "1"))
      (rule "applyOnRigidFormula" (formula "8"))
      (rule "applyOnRigidFormula" (formula "8") (term "0"))
      (rule "simplifyUpdate2" (formula "8") (term "0,0"))
      (rule "simplifyUpdate2" (formula "8") (term "1,0"))
      (rule "applyOnRigidFormula" (formula "8") (term "0,0"))
      (rule "simplifyUpdate2" (formula "8") (term "0,0,0"))
      (rule "applyOnRigidFormula" (formula "8") (term "1,0"))
      (rule "simplifyUpdate1" (formula "8") (term "1,1,0"))
      (rule "applyOnRigidFormula" (formula "8") (term "1,0,0"))
      (rule "applyOnPV" (formula "8") (term "1,1,0,0"))
      (rule "simplifyUpdate1" (formula "8") (term "0,1,0,0"))
      (rule "applyOnRigidTerm" (formula "8") (term "0,1,0"))
      (rule "simplifyUpdate1" (formula "8") (term "2,0,1,0"))
      (rule "simplifyUpdate1" (formula "8") (term "1,0,1,0"))
      (rule "simplifyUpdate1" (formula "8") (term "0,0,1,0"))
      (rule "applyOnPV" (formula "8") (term "1,0,1,0"))
      (rule "applyOnPV" (formula "8") (term "0,0,1,0"))
      (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0,0,1,1,0,1"))
      (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0,0,1,1,0,1"))
      (rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0,0"))
      (rule "variableDeclarationAssign" (formula "1") (term "1"))
      (rule "variableDeclarationAssign" (formula "11") (term "1"))
      (rule "variableDeclaration" (formula "1") (term "1") (newnames "b_2"))
      (rule "variableDeclaration" (formula "11") (term "1") (newnames "exc_1"))
      (rule "assignment" (formula "11") (term "1"))
      (rule "sequentialToParallel2" (formula "11"))
      (rule "simplifyUpdate3" (formula "11") (term "1,0"))
      (rule "variableDeclaration" (formula "11") (term "1") (newnames "thrownExc"))
      (rule "blockThrow" (formula "11") (term "1,0,0,1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "8") (term "1,1,0,0"))
      (rule "polySimp_rightDist" (formula "8") (term "1,1,0,0"))
      (rule "mul_literals" (formula "8") (term "0,1,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,0"))
      (rule "polySimp_elimOne" (formula "8") (term "1,1,1,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0,0,1,1,0,1"))
      (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0,0,1,1,0,1"))
      (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0,0,1,1,0,1"))
      (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0,0,1,1,0,1"))
      (rule "mul_literals" (formula "11") (term "0,1,1,0,0,0,1,1,0,1"))
      (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0,0,1,1,0,1"))
      (rule "boxToDiamond" (formula "1") (term "1"))
      (rule "notLeft" (formula "1"))
      (rule "all_unused" (formula "11") (term "0,1,1,1,0,1"))
      (rule "all_unused" (formula "11") (term "1,1,1,0,1"))
      (rule "concrete_and_3" (formula "11") (term "1,1,0,1"))
      (rule "nnf_imp2or" (formula "7") (term "0"))
      (rule "nnf_notAnd" (formula "7") (term "0,0"))
      (rule "inEqSimp_notGeq" (formula "7") (term "0,0,0"))
      (rule "times_zero_1" (formula "7") (term "1,0,0,0,0,0"))
      (rule "add_zero_right" (formula "7") (term "0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "0,0,0"))
      (rule "mul_literals" (formula "7") (term "1,0,0,0"))
      (rule "inEqSimp_notLeq" (formula "7") (term "1,0,0"))
      (rule "polySimp_rightDist" (formula "7") (term "1,0,0,1,0,0"))
      (rule "mul_literals" (formula "7") (term "0,1,0,0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "7") (term "0,0,1,0,0"))
      (rule "add_literals" (formula "7") (term "0,0,0,1,0,0"))
      (rule "add_zero_left" (formula "7") (term "0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "7") (term "1,0,0"))
      (rule "polySimp_mulLiterals" (formula "7") (term "1,1,0,0"))
      (rule "polySimp_elimOne" (formula "7") (term "1,1,0,0"))
      (rule "nnf_imp2or" (formula "11") (term "0,1,1,0,1"))
      (rule "nnf_notAnd" (formula "11") (term "0,0,1,1,0,1"))
      (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0,1,1,0,1"))
      (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0,1,1,0,1"))
      (rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0,1,1,0,1"))
      (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0,1,1,0,1"))
      (rule "add_literals" (formula "11") (term "0,0,0,1,0,0,1,1,0,1"))
      (rule "add_zero_left" (formula "11") (term "0,0,1,0,0,1,1,0,1"))
      (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0,1,1,0,1"))
      (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,1,1,0,1"))
      (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,1,1,0,1"))
      (rule "inEqSimp_notGeq" (formula "11") (term "0,0,0,1,1,0,1"))
      (rule "times_zero_1" (formula "11") (term "1,0,0,0,0,0,1,1,0,1"))
      (rule "add_zero_right" (formula "11") (term "0,0,0,0,0,1,1,0,1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0,1,1,0,1"))
      (rule "mul_literals" (formula "11") (term "1,0,0,0,1,1,0,1"))
      (rule "compound_less_than_comparison_2" (formula "8") (term "1") (inst "#v0=x") (inst "#v1=x_1"))
      (rule "variableDeclarationAssign" (formula "8") (term "1"))
      (rule "variableDeclaration" (formula "8") (term "1") (newnames "x_2"))
      (rule "assignment" (formula "8") (term "1"))
      (rule "sequentialToParallel2" (formula "8"))
      (rule "simplifyUpdate2" (formula "8"))
      (rule "simplifyUpdate3" (formula "8") (term "1,0"))
      (rule "applyOnElementary" (formula "8") (term "1,0"))
      (rule "applyOnPV" (formula "8") (term "0,1,0"))
      (rule "variableDeclarationAssign" (formula "8") (term "1"))
      (rule "variableDeclaration" (formula "8") (term "1") (newnames "x_3"))
      (rule "assignment_read_length" (formula "8") (term "1"))
      (branch "Normal Execution (_a != null)"
         (rule "simplifyUpdate2" (formula "8"))
         (rule "sequentialToParallel2" (formula "9"))
         (rule "simplifyUpdate2" (formula "9"))
         (rule "simplifyUpdate3" (formula "9") (term "1,0"))
         (rule "applyOnElementary" (formula "9") (term "1,0"))
         (rule "applyOnRigidFormula" (formula "8"))
         (rule "simplifyUpdate1" (formula "8") (term "1"))
         (rule "applyOnPV" (formula "8") (term "0"))
         (rule "applyOnRigidTerm" (formula "8") (term "0,1,0"))
         (rule "applyOnPV" (formula "8") (term "0,0,1,0"))
         (rule "less_than_comparison_simple" (formula "8") (term "1"))
         (rule "sequentialToParallel2" (formula "8"))
         (rule "simplifyUpdate2" (formula "8"))
         (rule "simplifyUpdate3" (formula "8") (term "1,0"))
         (rule "applyOnElementary" (formula "8") (term "1,0"))
         (rule "applyOnRigidTerm" (formula "8") (term "0,1,0"))
         (rule "simplifyUpdate1" (formula "8") (term "1,0,1,0"))
         (rule "simplifyUpdate1" (formula "8") (term "2,0,1,0"))
         (rule "applyOnRigidFormula" (formula "8") (term "0,0,1,0"))
         (rule "simplifyUpdate1" (formula "8") (term "1,0,0,1,0"))
         (rule "simplifyUpdate1" (formula "8") (term "0,0,0,1,0"))
         (rule "applyOnPV" (formula "8") (term "1,0,0,1,0"))
         (rule "applyOnPV" (formula "8") (term "0,0,0,1,0"))
         (rule "inEqSimp_ltToLeq" (formula "8") (term "0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0,0,1,0"))
         (rule "polySimp_addComm1" (formula "8") (term "0,0,0,1,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "8") (term "0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "8") (term "0,0,0,1,0"))
         (rule "polySimp_elimOne" (formula "8") (term "0,0,0,1,0"))
         (rule "methodCallEmpty" (formula "8") (term "1"))
         (rule "simplifyUpdate2" (formula "8"))
         (rule "emptyModality" (formula "8") (term "1"))
         (rule "notRight" (formula "8"))
         (rule "applyOnRigidFormula" (formula "1"))
         (rule "simplifyUpdate1" (formula "1") (term "1"))
         (rule "applyOnPV" (formula "1") (term "0"))
         (rule "ifthenelse_concrete3" (formula "1"))
         (rule "boolean_not_equal_2" (formula "1") (term "1"))
         (rule "concrete_or_4" (formula "1"))
         (rule "ifUnfold" (formula "11") (term "1") (inst "#boolv=x"))
         (rule "variableDeclaration" (formula "11") (term "1") (newnames "x_4"))
         (rule "compound_less_than_comparison_2" (formula "11") (term "1") (inst "#v0=x_5") (inst "#v1=x_6"))
         (rule "variableDeclarationAssign" (formula "11") (term "1"))
         (rule "variableDeclaration" (formula "11") (term "1") (newnames "x_5"))
         (rule "assignment" (formula "11") (term "1"))
         (rule "sequentialToParallel2" (formula "11"))
         (rule "simplifyUpdate3" (formula "11") (term "1,0"))
         (rule "applyOnElementary" (formula "11") (term "1,0"))
         (rule "applyOnPV" (formula "11") (term "0,1,0"))
         (rule "variableDeclarationAssign" (formula "11") (term "1"))
         (rule "variableDeclaration" (formula "11") (term "1") (newnames "x_6"))
         (rule "assignment_read_length" (formula "11") (term "1"))
         (branch "Normal Execution (_a != null)"
            (rule "simplifyUpdate2" (formula "11"))
            (rule "sequentialToParallel2" (formula "12"))
            (rule "simplifyUpdate3" (formula "12") (term "1,0"))
            (rule "applyOnElementary" (formula "12") (term "1,0"))
            (rule "applyOnRigidFormula" (formula "11"))
            (rule "simplifyUpdate1" (formula "11") (term "1"))
            (rule "applyOnPV" (formula "11") (term "0"))
            (rule "applyOnRigidTerm" (formula "11") (term "0,1,0"))
            (rule "applyOnPV" (formula "11") (term "0,0,1,0"))
            (rule "less_than_comparison_simple" (formula "11") (term "1"))
            (rule "sequentialToParallel2" (formula "11"))
            (rule "simplifyUpdate2" (formula "11"))
            (rule "simplifyUpdate3" (formula "11") (term "1,0"))
            (rule "applyOnElementary" (formula "11") (term "1,0"))
            (rule "applyOnRigidTerm" (formula "11") (term "0,1,0"))
            (rule "simplifyUpdate1" (formula "11") (term "2,0,1,0"))
            (rule "simplifyUpdate1" (formula "11") (term "1,0,1,0"))
            (rule "applyOnRigidFormula" (formula "11") (term "0,0,1,0"))
            (rule "simplifyUpdate1" (formula "11") (term "0,0,0,1,0"))
            (rule "simplifyUpdate1" (formula "11") (term "1,0,0,1,0"))
            (rule "applyOnPV" (formula "11") (term "0,0,0,1,0"))
            (rule "applyOnPV" (formula "11") (term "1,0,0,1,0"))
            (rule "inEqSimp_ltToLeq" (formula "11") (term "0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,1,0"))
            (rule "polySimp_addComm1" (formula "11") (term "0,0,0,1,0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "11") (term "0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "11") (term "0,0,0,1,0"))
            (rule "polySimp_elimOne" (formula "11") (term "0,0,0,1,0"))
            (rule "replace_known_left" (formula "11") (term "0,0,1,0") (ifseqformula "1"))
            (rule "ifthenelse_true" (formula "11") (term "0,1,0"))
            (rule "ifSplit" (formula "11"))
            (branch "if x_4 true"
               (rule "simplifyUpdate2" (formula "1"))
               (rule "simplifyUpdate2" (formula "12"))
               (rule "applyOnRigidFormula" (formula "1"))
               (rule "applyOnPV" (formula "1") (term "0"))
               (rule "simplifyUpdate1" (formula "1") (term "1"))
               (rule "boolean_equal" (formula "1"))
               (rule "true_left" (formula "1"))
               (rule "assignment_to_primitive_array_component" (formula "11") (term "1"))
               (branch "Normal Execution (_a != null)"
                  (rule "simplifyUpdate2" (formula "1"))
                  (rule "andLeft" (formula "1"))
                  (rule "simplifyUpdate2" (formula "2"))
                  (rule "andLeft" (formula "1"))
                  (rule "simplifyUpdate2" (formula "1"))
                  (rule "notLeft" (formula "1"))
                  (rule "sequentialToParallel2" (formula "14"))
                  (rule "simplifyUpdate2" (formula "14"))
                  (rule "simplifyUpdate3" (formula "14") (term "1,0"))
                  (rule "applyOnElementary" (formula "14") (term "1,0"))
                  (rule "applyOnRigidFormula" (formula "2"))
                  (rule "applyOnPV" (formula "2") (term "0"))
                  (rule "simplifyUpdate1" (formula "2") (term "1"))
                  (rule "applyOnRigidFormula" (formula "1"))
                  (rule "simplifyUpdate1" (formula "1") (term "0"))
                  (rule "simplifyUpdate1" (formula "1") (term "1"))
                  (rule "applyOnPV" (formula "1") (term "0"))
                  (rule "applyOnRigidFormula" (formula "11"))
                  (rule "applyOnPV" (formula "11") (term "0"))
                  (rule "simplifyUpdate1" (formula "11") (term "1"))
                  (rule "applyOnRigidTerm" (formula "13") (term "0,1,0"))
                  (rule "simplifyUpdate1" (formula "13") (term "2,0,1,0"))
                  (rule "simplifyUpdate1" (formula "13") (term "0,0,1,0"))
                  (rule "simplifyUpdate1" (formula "13") (term "1,0,1,0"))
                  (rule "simplifyUpdate1" (formula "13") (term "3,0,1,0"))
                  (rule "applyOnPV" (formula "13") (term "0,0,1,0"))
                  (rule "applyOnPV" (formula "13") (term "1,0,1,0"))
                  (rule "applyOnRigidTerm" (formula "1") (term "1"))
                  (rule "applyOnPV" (formula "1") (term "0,1"))
                  (rule "applyOnRigidTerm" (formula "13") (term "2,0,1,0"))
                  (rule "applyOnPV" (formula "13") (term "0,2,0,1,0"))
                  (rule "inEqSimp_ltToLeq" (formula "1"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "1") (term "0"))
                  (rule "blockEmpty" (formula "13") (term "1"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                  (rule "polySimp_elimOne" (formula "1") (term "0"))
                  (rule "postincrement" (formula "12") (term "1"))
                  (rule "compound_int_cast_expression" (formula "12") (term "1") (inst "#v=x"))
                  (rule "variableDeclarationAssign" (formula "12") (term "1"))
                  (rule "variableDeclaration" (formula "12") (term "1") (newnames "x_9"))
                  (rule "remove_parentheses_right" (formula "12") (term "1"))
                  (rule "assignmentAdditionInt" (formula "12") (term "1"))
                  (rule "translateJavaAddInt" (formula "12") (term "0,0,1"))
                  (rule "sequentialToParallel2" (formula "12"))
                  (rule "simplifyUpdate3" (formula "12") (term "1,0"))
                  (rule "applyOnElementary" (formula "12") (term "1,0"))
                  (rule "polySimp_addComm0" (formula "12") (term "1,0,1,0"))
                  (rule "applyOnRigidTerm" (formula "12") (term "0,1,0"))
                  (rule "simplifyUpdate1" (formula "12") (term "0,0,1,0"))
                  (rule "applyOnPV" (formula "12") (term "1,0,1,0"))
                  (rule "widening_identity_cast_5" (formula "12") (term "1"))
                  (rule "assignment" (formula "12") (term "1"))
                  (rule "sequentialToParallel2" (formula "12"))
                  (rule "simplifyUpdate2" (formula "12"))
                  (rule "simplifyUpdate3" (formula "12") (term "1,0"))
                  (rule "applyOnElementary" (formula "12") (term "1,0"))
                  (rule "applyOnPV" (formula "12") (term "0,1,0"))
                  (rule "tryEmpty" (formula "12") (term "1"))
                  (rule "methodCallEmpty" (formula "12") (term "1"))
                  (rule "emptyModality" (formula "12") (term "1"))
                  (rule "applyOnRigidFormula" (formula "12"))
                  (rule "simplifyUpdate2" (formula "12") (term "0"))
                  (rule "simplifyUpdate2" (formula "12") (term "1"))
                  (rule "applyOnRigidFormula" (formula "12") (term "0"))
                  (rule "simplifyUpdate2" (formula "12") (term "0,0"))
                  (rule "simplifyUpdate2" (formula "12") (term "1,0"))
                  (rule "applyOnRigidFormula" (formula "12") (term "1"))
                  (rule "simplifyUpdate2" (formula "12") (term "1,1"))
                  (rule "simplifyUpdate2" (formula "12") (term "0,1"))
                  (rule "applyOnRigidFormula" (formula "12") (term "0,0"))
                  (rule "applyOnPV" (formula "12") (term "0,0,0"))
                  (rule "simplifyUpdate1" (formula "12") (term "1,0,0"))
                  (rule "boolean_not_equal_2" (formula "12") (term "0,0"))
                  (rule "concrete_impl_2" (formula "12") (term "0"))
                  (rule "concrete_and_1" (formula "12"))
                  (rule "impRight" (formula "12"))
                  (rule "notLeft" (formula "1"))
                  (rule "allRight" (formula "13") (inst "sk=j_0"))
                  (rule "orRight" (formula "13"))
                  (rule "simplifyUpdate2" (formula "13"))
                  (rule "simplifyUpdate2" (formula "14"))
                  (rule "orRight" (formula "13"))
                  (rule "simplifyUpdate2" (formula "13"))
                  (rule "applyOnRigidFormula" (formula "10"))
                  (rule "applyOnPV" (formula "10") (term "0"))
                  (rule "simplifyUpdate1" (formula "10") (term "1"))
                  (rule "boolean_not_equal_2" (formula "10"))
                  (rule "false_right" (formula "10"))
                  (rule "applyOnRigidFormula" (formula "14"))
                  (rule "simplifyUpdate1" (formula "14") (term "1"))
                  (rule "applyOnRigidFormula" (formula "13"))
                  (rule "simplifyUpdate1" (formula "13") (term "0"))
                  (rule "applyOnPV" (formula "13") (term "1"))
                  (rule "applyOnRigidTerm" (formula "14") (term "0"))
                  (rule "simplifyUpdate1" (formula "14") (term "2,0"))
                  (rule "simplifyUpdate1" (formula "14") (term "0,0"))
                  (rule "simplifyUpdate1" (formula "14") (term "1,0"))
                  (rule "applyOnPV" (formula "14") (term "0,0"))
                  (rule "applyOnPV" (formula "14") (term "1,0"))
                  (rule "inEqSimp_leqRight" (formula "12"))
                  (rule "mul_literals" (formula "1") (term "1,0,0"))
                  (rule "add_literals" (formula "1") (term "0,0"))
                  (rule "add_zero_left" (formula "1") (term "0"))
                  (rule "inEqSimp_geqRight" (formula "13"))
                  (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                  (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                  (rule "add_literals" (formula "1") (term "0,0,0"))
                  (rule "add_zero_left" (formula "1") (term "0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                  (rule "polySimp_elimOne" (formula "1") (term "1"))
                  (rule "pullOutSelect" (formula "14") (term "0") (inst "selectSK=arr_1"))
                  (rule "simplifySelectOfStore" (formula "1"))
                  (rule "equalUnique" (formula "1") (term "1,0,0,0"))
                  (rule "eqClose" (formula "1") (term "0,0,0,0"))
                  (rule "concrete_and_1" (formula "1") (term "0,0,0"))
                  (rule "equalUnique" (formula "1") (term "0,1,0,0"))
                  (rule "concrete_not_2" (formula "1") (term "1,0,0"))
                  (rule "concrete_and_3" (formula "1") (term "0,0"))
                  (rule "castDel" (formula "1") (term "1,0"))
                  (rule "eqSymm" (formula "1") (term "0,0"))
                  (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=arr_2"))
                  (rule "simplifySelectOfAnon" (formula "1"))
                  (rule "elementOfFreshLocs" (formula "1") (term "1,0,0"))
                  (rule "elementOfAllLocs" (formula "1") (term "0,0,0,0"))
                  (rule "concrete_and_1" (formula "1") (term "0,0,0"))
                  (rule "equalUnique" (formula "1") (term "0,0,0,0"))
                  (rule "concrete_not_2" (formula "1") (term "0,0,0"))
                  (rule "concrete_or_1" (formula "1") (term "0,0"))
                  (rule "ifthenelse_true" (formula "1") (term "0"))
                  (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                  (rule "hideAuxiliaryEq" (formula "1"))
                  (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "2"))
                  (rule "times_zero_1" (formula "3") (term "0,0"))
                  (rule "add_zero_left" (formula "3") (term "0"))
                  (rule "arrayLengthNotNegative" (formula "5") (term "0"))
                  (rule "arrayLengthIsAnInt" (formula "6") (term "0"))
                  (rule "inInt" (formula "6"))
                  (rule "true_left" (formula "6"))
                  (rule "ifthenelse_split" (formula "1") (term "0"))
                  (branch "j_0 = i_0 TRUE"
                     (rule "applyEqReverse" (formula "17") (term "0") (ifseqformula "2"))
                     (rule "eqClose" (formula "17"))
                     (rule "closeTrue" (formula "17"))
                  )
                  (branch "j_0 = i_0 FALSE"
                     (rule "applyEqReverse" (formula "17") (term "0") (ifseqformula "1"))
                     (rule "hideAuxiliaryEq" (formula "1"))
                     (rule "inEqSimp_strengthen0" (formula "1") (ifseqformula "13"))
                     (rule "inEqSimp_contradEq3" (formula "13") (ifseqformula "1"))
                     (rule "polySimp_mulComm0" (formula "13") (term "1,0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "13") (term "0,0"))
                     (rule "add_literals" (formula "13") (term "1,1,0,0"))
                     (rule "times_zero_1" (formula "13") (term "1,0,0"))
                     (rule "add_zero_right" (formula "13") (term "0,0"))
                     (rule "qeq_literals" (formula "13") (term "0"))
                     (rule "concrete_and_2" (formula "13"))
                     (rule "false_right" (formula "13"))
                     (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "1"))
                     (rule "times_zero_1" (formula "2") (term "0,0"))
                     (rule "add_zero_left" (formula "2") (term "0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                     (rule "mul_literals" (formula "2") (term "1"))
                     (rule "inEqSimp_subsumption1" (formula "4") (ifseqformula "2"))
                     (rule "leq_literals" (formula "4") (term "0"))
                     (rule "concrete_or_1" (formula "4"))
                     (rule "true_left" (formula "4"))
                     (rule "allLeft" (formula "12") (inst "t=j_0"))
                     (rule "replaceKnownSelect_taclet000010_1" (formula "12") (term "0,1"))
                     (rule "replaceKnownAuxiliaryConstant_taclet000010_2" (formula "12") (term "0,1"))
                     (rule "replace_known_right" (formula "12") (term "1") (ifseqformula "16"))
                     (rule "concrete_or_4" (formula "12"))
                     (rule "inEqSimp_contradInEq1" (formula "12") (term "0") (ifseqformula "3"))
                     (rule "qeq_literals" (formula "12") (term "0,0"))
                     (rule "concrete_and_2" (formula "12") (term "0"))
                     (rule "concrete_or_2" (formula "12"))
                     (rule "inEqSimp_contradInEq0" (formula "12") (ifseqformula "1"))
                     (rule "andLeft" (formula "12"))
                     (rule "inEqSimp_homoInEq1" (formula "12"))
                     (rule "polySimp_mulComm0" (formula "12") (term "1,0"))
                     (rule "polySimp_rightDist" (formula "12") (term "1,0"))
                     (rule "mul_literals" (formula "12") (term "0,1,0"))
                     (rule "polySimp_addAssoc" (formula "12") (term "0"))
                     (rule "polySimp_addComm0" (formula "12") (term "0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "12") (term "0"))
                     (rule "add_literals" (formula "12") (term "1,1,0"))
                     (rule "times_zero_1" (formula "12") (term "1,0"))
                     (rule "add_literals" (formula "12") (term "0"))
                     (rule "leq_literals" (formula "12"))
                     (rule "closeFalse" (formula "12"))
                  )
               )
               (branch "Null Reference (_a = null)"
                  (rule "simplifyUpdate2" (formula "1"))
                  (rule "applyOnRigidFormula" (formula "1"))
                  (rule "applyOnPV" (formula "1") (term "0"))
                  (rule "simplifyUpdate1" (formula "1") (term "1"))
                  (rule "close" (formula "11") (ifseqformula "1"))
               )
               (branch "Index Out of Bounds (_a != null, but i Out of Bounds!)"
                  (rule "simplifyUpdate2" (formula "1"))
                  (rule "andLeft" (formula "1"))
                  (rule "simplifyUpdate2" (formula "1"))
                  (rule "notLeft" (formula "1"))
                  (rule "applyOnRigidFormula" (formula "1"))
                  (rule "simplifyUpdate2" (formula "1") (term "1"))
                  (rule "applyOnRigidFormula" (formula "10"))
                  (rule "simplifyUpdate1" (formula "10") (term "1"))
                  (rule "applyOnPV" (formula "10") (term "0"))
                  (rule "applyOnRigidFormula" (formula "1") (term "0"))
                  (rule "simplifyUpdate1" (formula "1") (term "1,0"))
                  (rule "simplifyUpdate1" (formula "1") (term "0,0"))
                  (rule "applyOnPV" (formula "1") (term "1,0"))
                  (rule "applyOnRigidFormula" (formula "1") (term "1"))
                  (rule "simplifyUpdate1" (formula "1") (term "1,1"))
                  (rule "applyOnPV" (formula "1") (term "0,1"))
                  (rule "applyOnRigidTerm" (formula "1") (term "0,0"))
                  (rule "applyOnPV" (formula "1") (term "0,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "1") (term "1"))
                  (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
                  (rule "add_zero_right" (formula "1") (term "0,0,1"))
                  (rule "blockThrow" (formula "12") (term "1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1"))
                  (rule "mul_literals" (formula "1") (term "1,1"))
                  (rule "inEqSimp_contradInEq1" (formula "1") (term "0") (ifseqformula "2"))
                  (rule "inEqSimp_homoInEq1" (formula "1") (term "0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,0"))
                  (rule "add_literals" (formula "1") (term "1,1,0,0,0"))
                  (rule "times_zero_1" (formula "1") (term "1,0,0,0"))
                  (rule "add_literals" (formula "1") (term "0,0,0"))
                  (rule "leq_literals" (formula "1") (term "0,0"))
                  (rule "concrete_and_2" (formula "1") (term "0"))
                  (rule "concrete_or_2" (formula "1"))
                  (rule "arrayLengthNotNegative" (formula "2") (term "0"))
                  (rule "arrayLengthIsAnInt" (formula "3") (term "0"))
                  (rule "inInt" (formula "3"))
                  (rule "true_left" (formula "3"))
                  (rule "methodCallThrow" (formula "13") (term "1,0,0,1"))
                  (rule "tryCatchThrow" (formula "13") (term "1,0,0,1"))
                  (rule "ifElseUnfold" (formula "13") (term "1,0,0,1") (inst "#boolv=x"))
                  (rule "variableDeclaration" (formula "13") (term "1,0,0,1") (newnames "x_7"))
                  (rule "equality_comparison_simple" (formula "13") (term "1,0,0,1"))
                  (rule "throwUnfold" (formula "13") (term "1") (inst "#v0=a"))
                  (rule "variableDeclarationAssign" (formula "13") (term "1"))
                  (rule "variableDeclaration" (formula "13") (term "1") (newnames "a_1"))
                  (rule "instanceCreationAssignment" (formula "13") (term "1") (inst "#v0=a_2"))
                  (rule "variableDeclarationAssign" (formula "13") (term "1"))
                  (rule "variableDeclaration" (formula "13") (term "1") (newnames "a_2"))
                  (rule "staticMethodCallStaticWithAssignmentViaTypereference" (formula "13") (term "1") (inst "#v0=a_3"))
                  (rule "variableDeclaration" (formula "13") (term "1") (newnames "a_3"))
                  (rule "methodBodyExpand" (formula "13") (term "1") (newnames "heapBefore_<createObject>,savedHeapBefore_<createObject>"))
                  (rule "simplifyUpdate2" (formula "13") (term "1"))
                  (rule "variableDeclaration" (formula "13") (term "1") (newnames "__NEW__"))
                  (rule "staticMethodCallStaticWithAssignmentViaTypereference" (formula "13") (term "1") (inst "#v0=a_4"))
                  (rule "variableDeclaration" (formula "13") (term "1") (newnames "a_4"))
                  (rule "allocateInstance" (formula "13"))
                  (rule "false_to_not_true" (formula "1") (term "1,1,0,1"))
                  (rule "simplifyUpdate2" (formula "1"))
                  (rule "andLeft" (formula "1"))
                  (rule "simplifyUpdate2" (formula "2"))
                  (rule "andLeft" (formula "1"))
                  (rule "simplifyUpdate2" (formula "1"))
                  (rule "notLeft" (formula "1"))
                  (rule "sequentialToParallel2" (formula "16"))
                  (rule "simplifyUpdate2" (formula "16"))
                  (rule "simplifyUpdate3" (formula "16") (term "1,0"))
                  (rule "applyOnElementary" (formula "16") (term "1,0"))
                  (rule "applyOnRigidFormula" (formula "1"))
                  (rule "applyOnRigidTerm" (formula "16") (term "0,1,0"))
                  (rule "applyOnPV" (formula "16") (term "0,0,1,0"))
                  (rule "simplifyUpdate1" (formula "16") (term "1,0,1,0"))
                  (rule "applyOnRigidFormula" (formula "1") (term "1"))
                  (rule "applyOnRigidFormula" (formula "1") (term "0"))
                  (rule "applyOnPV" (formula "1") (term "0,0"))
                  (rule "wellFormedAnon" (formula "1") (term "0"))
                  (rule "replace_known_left" (formula "1") (term "1,0") (ifseqformula "11"))
                  (rule "concrete_and_3" (formula "1") (term "0"))
                  (rule "replace_known_left" (formula "1") (term "0") (ifseqformula "6"))
                  (rule "concrete_impl_1" (formula "1"))
                  (rule "notLeft" (formula "1"))
                  (rule "applyOnRigidFormula" (formula "12"))
                  (rule "simplifyUpdate1" (formula "12") (term "1"))
                  (rule "applyOnRigidTerm" (formula "12") (term "0"))
                  (rule "simplifyUpdate1" (formula "12") (term "1,0"))
                  (rule "applyOnPV" (formula "12") (term "0,0"))
                  (rule "simplifyUpdate1" (formula "12") (term "2,0"))
                  (rule "selectCreatedOfAnonAsFormula" (formula "12"))
                  (rule "orRight" (formula "12"))
                  (rule "blockEmpty" (formula "17") (term "1"))
                  (rule "assignment" (formula "17") (term "1"))
                  (rule "sequentialToParallel2" (formula "17"))
                  (rule "simplifyUpdate3" (formula "17") (term "1,0"))
                  (rule "methodBodyExpand" (formula "17") (term "1") (newnames "heapBefore_<create>,savedHeapBefore_<create>"))
                  (rule "simplifyUpdate2" (formula "17") (term "1"))
                  (rule "assignment_write_attribute_this" (formula "17") (term "1"))
                  (rule "sequentialToParallel2" (formula "17"))
                  (rule "simplifyUpdate2" (formula "17"))
                  (rule "simplifyUpdate3" (formula "17") (term "1,0"))
                  (rule "applyOnElementary" (formula "17") (term "1,0"))
                  (rule "applyOnRigidTerm" (formula "17") (term "0,1,0"))
                  (rule "simplifyUpdate1" (formula "17") (term "2,0,1,0"))
                  (rule "simplifyUpdate1" (formula "17") (term "1,0,1,0"))
                  (rule "simplifyUpdate1" (formula "17") (term "0,0,1,0"))
                  (rule "simplifyUpdate1" (formula "17") (term "3,0,1,0"))
                  (rule "applyOnPV" (formula "17") (term "1,0,1,0"))
                  (rule "applyOnPV" (formula "17") (term "0,0,1,0"))
                  (rule "methodCallWithinClass" (formula "17") (term "1"))
                  (rule "methodBodyExpand" (formula "17") (term "1") (newnames "heapBefore_<prepareEnter>,savedHeapBefore_<prepareEnter>"))
                  (rule "simplifyUpdate2" (formula "17") (term "1"))
                  (rule "methodCallSuper" (formula "17") (term "1"))
                  (rule "methodBodyExpand" (formula "17") (term "1") (newnames "heapBefore_<prepare>,savedHeapBefore_<prepare>"))
                  (rule "simplifyUpdate2" (formula "17") (term "1"))
                  (rule "methodCallSuper" (formula "17") (term "1"))
                  (rule "methodBodyExpand" (formula "17") (term "1") (newnames "heapBefore_<prepare>_0,savedHeapBefore_<prepare>_0"))
                  (rule "simplifyUpdate2" (formula "17") (term "1"))
                  (rule "methodCallSuper" (formula "17") (term "1"))
                  (rule "methodBodyExpand" (formula "17") (term "1") (newnames "heapBefore_<prepare>_1,savedHeapBefore_<prepare>_1"))
                  (rule "simplifyUpdate2" (formula "17") (term "1"))
                  (rule "methodCallSuper" (formula "17") (term "1"))
                  (rule "methodBodyExpand" (formula "17") (term "1") (newnames "heapBefore_<prepare>_2,savedHeapBefore_<prepare>_2"))
                  (rule "simplifyUpdate2" (formula "17") (term "1"))
                  (rule "methodCallSuper" (formula "17") (term "1"))
                  (rule "methodBodyExpand" (formula "17") (term "1") (newnames "heapBefore_<prepare>_3,savedHeapBefore_<prepare>_3"))
                  (rule "simplifyUpdate2" (formula "17") (term "1"))
                  (rule "methodCallEmpty" (formula "17") (term "1"))
                  (rule "blockEmpty" (formula "17") (term "1"))
                  (rule "assignment_write_attribute_this" (formula "17") (term "1"))
                  (rule "castDel" (formula "17") (term "1,0,0,1"))
                  (rule "sequentialToParallel2" (formula "17"))
                  (rule "simplifyUpdate2" (formula "17"))
                  (rule "simplifyUpdate3" (formula "17") (term "1,0"))
                  (rule "applyOnElementary" (formula "17") (term "1,0"))
                  (rule "applyOnRigidTerm" (formula "17") (term "0,1,0"))
                  (rule "simplifyUpdate1" (formula "17") (term "3,0,1,0"))
                  (rule "simplifyUpdate1" (formula "17") (term "0,0,1,0"))
                  (rule "simplifyUpdate1" (formula "17") (term "1,0,1,0"))
                  (rule "simplifyUpdate1" (formula "17") (term "2,0,1,0"))
                  (rule "applyOnPV" (formula "17") (term "0,0,1,0"))
                  (rule "applyOnPV" (formula "17") (term "1,0,1,0"))
                  (rule "assignment_write_attribute_this" (formula "17") (term "1"))
                  (rule "castDel" (formula "17") (term "1,0,0,1"))
                  (rule "sequentialToParallel2" (formula "17"))
                  (rule "simplifyUpdate2" (formula "17"))
                  (rule "simplifyUpdate3" (formula "17") (term "1,0"))
                  (rule "applyOnElementary" (formula "17") (term "1,0"))
                  (rule "applyOnRigidTerm" (formula "17") (term "0,1,0"))
                  (rule "simplifyUpdate1" (formula "17") (term "1,0,1,0"))
                  (rule "simplifyUpdate1" (formula "17") (term "0,0,1,0"))
                  (rule "simplifyUpdate1" (formula "17") (term "2,0,1,0"))
                  (rule "simplifyUpdate1" (formula "17") (term "3,0,1,0"))
                  (rule "applyOnPV" (formula "17") (term "1,0,1,0"))
                  (rule "applyOnPV" (formula "17") (term "0,0,1,0"))
                  (rule "methodCallEmpty" (formula "17") (term "1"))
                  (rule "methodCallEmpty" (formula "17") (term "1"))
                  (rule "methodCallEmpty" (formula "17") (term "1"))
                  (rule "methodCallEmpty" (formula "17") (term "1"))
                  (rule "methodCallEmpty" (formula "17") (term "1"))
                  (rule "blockEmpty" (formula "17") (term "1"))
                  (rule "methodCallReturnIgnoreResult" (formula "17") (term "1"))
                  (rule "methodCallReturn" (formula "17") (term "1"))
                  (rule "assignment" (formula "17") (term "1"))
                  (rule "sequentialToParallel2" (formula "17"))
                  (rule "simplifyUpdate2" (formula "17"))
                  (rule "simplifyUpdate3" (formula "17") (term "1,0"))
                  (rule "applyOnElementary" (formula "17") (term "1,0"))
                  (rule "applyOnPV" (formula "17") (term "0,1,0"))
                  (rule "methodCallEmpty" (formula "17") (term "1"))
                  (rule "blockEmpty" (formula "17") (term "1"))
                  (rule "assignment" (formula "17") (term "1"))
                  (rule "sequentialToParallel2" (formula "17"))
                  (rule "simplifyUpdate2" (formula "17"))
                  (rule "simplifyUpdate3" (formula "17") (term "1,0"))
                  (rule "applyOnElementary" (formula "17") (term "1,0"))
                  (rule "applyOnPV" (formula "17") (term "0,1,0"))
                  (rule "methodBodyExpand" (formula "17") (term "1") (newnames "heapBefore_<init>,savedHeapBefore_<init>"))
                  (rule "simplifyUpdate2" (formula "17") (term "1"))
                  (rule "methodCallSuper" (formula "17") (term "1"))
                  (rule "methodBodyExpand" (formula "17") (term "1") (newnames "heapBefore_<init>_0,savedHeapBefore_<init>_0"))
                  (rule "simplifyUpdate2" (formula "17") (term "1"))
                  (rule "methodCallSuper" (formula "17") (term "1"))
                  (rule "methodBodyExpand" (formula "17") (term "1") (newnames "heapBefore_<init>_1,savedHeapBefore_<init>_1"))
                  (rule "simplifyUpdate2" (formula "17") (term "1"))
                  (rule "methodCallSuper" (formula "17") (term "1"))
                  (rule "methodBodyExpand" (formula "17") (term "1") (newnames "heapBefore_<init>_2,savedHeapBefore_<init>_2"))
                  (rule "simplifyUpdate2" (formula "17") (term "1"))
                  (rule "methodCallSuper" (formula "17") (term "1"))
                  (rule "methodBodyExpand" (formula "17") (term "1") (newnames "heapBefore_<init>_3,savedHeapBefore_<init>_3"))
                  (rule "simplifyUpdate2" (formula "17") (term "1"))
                  (rule "methodCallSuper" (formula "17") (term "1"))
                  (rule "methodBodyExpand" (formula "17") (term "1") (newnames "heapBefore_<init>_4,savedHeapBefore_<init>_4"))
                  (rule "simplifyUpdate2" (formula "17") (term "1"))
                  (rule "methodCallEmpty" (formula "17") (term "1"))
                  (rule "blockEmpty" (formula "17") (term "1"))
                  (rule "assignment_write_attribute_this" (formula "17") (term "1"))
                  (rule "castDel" (formula "17") (term "1,0,0,1"))
                  (rule "sequentialToParallel2" (formula "17"))
                  (rule "simplifyUpdate2" (formula "17"))
                  (rule "simplifyUpdate3" (formula "17") (term "1,0"))
                  (rule "applyOnElementary" (formula "17") (term "1,0"))
                  (rule "applyOnRigidTerm" (formula "17") (term "0,1,0"))
                  (rule "simplifyUpdate1" (formula "17") (term "3,0,1,0"))
                  (rule "simplifyUpdate1" (formula "17") (term "0,0,1,0"))
                  (rule "simplifyUpdate1" (formula "17") (term "1,0,1,0"))
                  (rule "simplifyUpdate1" (formula "17") (term "2,0,1,0"))
                  (rule "applyOnPV" (formula "17") (term "0,0,1,0"))
                  (rule "applyOnPV" (formula "17") (term "1,0,1,0"))
                  (rule "dropEffectlessStores" (formula "17") (term "0,1,0"))
                  (rule "assignment_write_attribute_this" (formula "17") (term "1"))
                  (rule "castDel" (formula "17") (term "1,0,0,1"))
                  (rule "sequentialToParallel2" (formula "17"))
                  (rule "simplifyUpdate2" (formula "17"))
                  (rule "simplifyUpdate3" (formula "17") (term "1,0"))
                  (rule "applyOnElementary" (formula "17") (term "1,0"))
                  (rule "applyOnRigidTerm" (formula "17") (term "0,1,0"))
                  (rule "simplifyUpdate1" (formula "17") (term "1,0,1,0"))
                  (rule "simplifyUpdate1" (formula "17") (term "0,0,1,0"))
                  (rule "simplifyUpdate1" (formula "17") (term "2,0,1,0"))
                  (rule "simplifyUpdate1" (formula "17") (term "3,0,1,0"))
                  (rule "applyOnPV" (formula "17") (term "1,0,1,0"))
                  (rule "applyOnPV" (formula "17") (term "0,0,1,0"))
                  (rule "dropEffectlessStores" (formula "17") (term "0,1,0"))
                  (rule "methodCallEmpty" (formula "17") (term "1"))
                  (rule "methodCallEmpty" (formula "17") (term "1"))
                  (rule "methodCallEmpty" (formula "17") (term "1"))
                  (rule "methodCallEmpty" (formula "17") (term "1"))
                  (rule "methodCallEmpty" (formula "17") (term "1"))
                  (rule "blockEmpty" (formula "17") (term "1"))
                  (rule "assignment_write_attribute" (formula "17") (term "1"))
                  (branch "Normal Execution (a_2 != null)"
                     (rule "simplifyUpdate2" (formula "17"))
                     (rule "sequentialToParallel2" (formula "18"))
                     (rule "simplifyUpdate2" (formula "18"))
                     (rule "simplifyUpdate3" (formula "18") (term "1,0"))
                     (rule "applyOnElementary" (formula "18") (term "1,0"))
                     (rule "applyOnRigidFormula" (formula "17"))
                     (rule "applyOnPV" (formula "17") (term "0"))
                     (rule "simplifyUpdate1" (formula "17") (term "1"))
                     (rule "applyOnRigidTerm" (formula "17") (term "0,1,0"))
                     (rule "simplifyUpdate1" (formula "17") (term "1,0,1,0"))
                     (rule "simplifyUpdate1" (formula "17") (term "0,0,1,0"))
                     (rule "simplifyUpdate1" (formula "17") (term "2,0,1,0"))
                     (rule "simplifyUpdate1" (formula "17") (term "3,0,1,0"))
                     (rule "applyOnPV" (formula "17") (term "1,0,1,0"))
                     (rule "applyOnPV" (formula "17") (term "0,0,1,0"))
                     (rule "dropEffectlessStores" (formula "17") (term "0,1,0"))
                     (rule "assignment" (formula "17") (term "1"))
                     (rule "sequentialToParallel2" (formula "17"))
                     (rule "simplifyUpdate2" (formula "17"))
                     (rule "simplifyUpdate3" (formula "17") (term "1,0"))
                     (rule "applyOnElementary" (formula "17") (term "1,0"))
                     (rule "applyOnPV" (formula "17") (term "0,1,0"))
                     (rule "tryCatchThrow" (formula "17") (term "1"))
                     (rule "ifElseUnfold" (formula "17") (term "1") (inst "#boolv=x"))
                     (rule "variableDeclaration" (formula "17") (term "1") (newnames "x_8"))
                     (rule "equality_comparison_simple" (formula "17") (term "1"))
                     (rule "sequentialToParallel2" (formula "17"))
                     (rule "simplifyUpdate3" (formula "17") (term "1,0"))
                     (rule "applyOnElementary" (formula "17") (term "1,0"))
                     (rule "applyOnRigidTerm" (formula "17") (term "0,1,0"))
                     (rule "simplifyUpdate1" (formula "17") (term "1,0,1,0"))
                     (rule "simplifyUpdate1" (formula "17") (term "2,0,1,0"))
                     (rule "applyOnRigidFormula" (formula "17") (term "0,0,1,0"))
                     (rule "applyOnPV" (formula "17") (term "0,0,0,1,0"))
                     (rule "simplifyUpdate1" (formula "17") (term "1,0,0,1,0"))
                     (rule "replace_known_right" (formula "17") (term "0,0,1,0") (ifseqformula "14"))
                     (rule "ifthenelse_false" (formula "17") (term "0,1,0"))
                     (rule "ifElseSplit" (formula "17"))
                     (branch "if x_8 true"
                        (rule "simplifyUpdate2" (formula "18"))
                        (rule "simplifyUpdate2" (formula "1"))
                        (rule "applyOnRigidFormula" (formula "1"))
                        (rule "applyOnPV" (formula "1") (term "0"))
                        (rule "simplifyUpdate1" (formula "1") (term "1"))
                        (rule "boolean_not_equal_2" (formula "1"))
                        (rule "closeFalse" (formula "1"))
                     )
                     (branch "if x_8 false"
                        (rule "false_to_not_true" (formula "1") (term "1"))
                        (rule "simplifyUpdate2" (formula "18"))
                        (rule "simplifyUpdate2" (formula "1"))
                        (rule "notLeft" (formula "1"))
                        (rule "applyOnRigidFormula" (formula "12"))
                        (rule "applyOnPV" (formula "12") (term "0"))
                        (rule "simplifyUpdate1" (formula "12") (term "1"))
                        (rule "boolean_not_equal_2" (formula "12"))
                        (rule "false_right" (formula "12"))
                        (rule "ifElseSplit" (formula "17"))
                        (branch "if a_1 instanceof java.lang.Throwable true"
                           (rule "instanceof_static_type" (formula "1") (term "2,0,1"))
                           (rule "ifthenelse_concrete4" (formula "1") (term "1"))
                           (rule "boolean_not_equal_2" (formula "1") (term "1,1"))
                           (rule "concrete_or_4" (formula "1") (term "1"))
                           (rule "simplifyUpdate2" (formula "1"))
                           (rule "notLeft" (formula "1"))
                           (rule "applyOnRigidFormula" (formula "12"))
                           (rule "simplifyUpdate1" (formula "12") (term "1"))
                           (rule "applyOnPV" (formula "12") (term "0"))
                           (rule "variableDeclaration" (formula "17") (term "1") (newnames "e"))
                           (rule "reference_type_cast" (formula "17") (term "1"))
                           (branch "Normal Execution (a_1 instanceof java.lang.Throwable)"
                              (rule "instanceof_static_type" (formula "1") (term "0,1,1"))
                              (rule "boolean_equal" (formula "1") (term "1,1"))
                              (rule "concrete_or_3" (formula "1") (term "1"))
                              (rule "true_left" (formula "1"))
                              (rule "sequentialToParallel2" (formula "17"))
                              (rule "simplifyUpdate2" (formula "17"))
                              (rule "simplifyUpdate3" (formula "17") (term "1,0"))
                              (rule "applyOnElementary" (formula "17") (term "1,0"))
                              (rule "applyOnPV" (formula "17") (term "0,1,0"))
                              (rule "assignment" (formula "17") (term "1"))
                              (rule "sequentialToParallel2" (formula "17"))
                              (rule "simplifyUpdate2" (formula "17"))
                              (rule "simplifyUpdate3" (formula "17") (term "1,0"))
                              (rule "assignment" (formula "17") (term "1"))
                              (rule "sequentialToParallel2" (formula "17"))
                              (rule "simplifyUpdate2" (formula "17"))
                              (rule "simplifyUpdate3" (formula "17") (term "1,0"))
                              (rule "applyOnElementary" (formula "17") (term "1,0"))
                              (rule "applyOnPV" (formula "17") (term "0,1,0"))
                              (rule "methodCallEmpty" (formula "17") (term "1"))
                              (rule "emptyModality" (formula "17") (term "1"))
                              (rule "applyOnRigidFormula" (formula "17"))
                              (rule "simplifyUpdate2" (formula "17") (term "1"))
                              (rule "simplifyUpdate2" (formula "17") (term "0"))
                              (rule "applyOnRigidFormula" (formula "17") (term "1"))
                              (rule "simplifyUpdate2" (formula "17") (term "0,1"))
                              (rule "simplifyUpdate2" (formula "17") (term "1,1"))
                              (rule "applyOnRigidFormula" (formula "17") (term "0"))
                              (rule "simplifyUpdate2" (formula "17") (term "0,0"))
                              (rule "simplifyUpdate2" (formula "17") (term "1,0"))
                              (rule "sequentialToParallel2" (formula "17") (term "1,0"))
                              (rule "simplifyUpdate3" (formula "17") (term "1,0,1,0"))
                              (rule "applyOnElementary" (formula "17") (term "1,0,1,0"))
                              (rule "applyOnRigidFormula" (formula "17") (term "0,1"))
                              (rule "applyOnRigidFormula" (formula "17") (term "1,1"))
                              (rule "applyOnRigidFormula" (formula "17") (term "0,0"))
                              (rule "applyOnPV" (formula "17") (term "0,0,0"))
                              (rule "simplifyUpdate1" (formula "17") (term "1,0,0"))
                              (rule "boolean_equal" (formula "17") (term "0,0"))
                              (rule "concrete_impl_1" (formula "17") (term "0"))
                              (rule "applyOnRigidFormula" (formula "17") (term "0,0,1"))
                              (rule "simplifyUpdate1" (formula "17") (term "1,0,0,1"))
                              (rule "applyOnPV" (formula "17") (term "0,0,0,1"))
                              (rule "boolean_equal" (formula "17") (term "0,0,1"))
                              (rule "concrete_not_1" (formula "17") (term "0,1"))
                              (rule "concrete_impl_2" (formula "17") (term "1"))
                              (rule "concrete_and_3" (formula "17"))
                              (rule "applyOnRigidTerm" (formula "17") (term "0,1,0"))
                              (rule "simplifyUpdate1" (formula "17") (term "1,0,1,0"))
                              (rule "simplifyUpdate1" (formula "17") (term "2,0,1,0"))
                              (rule "applyOnRigidFormula" (formula "17") (term "0,0,1,0"))
                              (rule "applyOnPV" (formula "17") (term "0,0,0,1,0"))
                              (rule "simplifyUpdate1" (formula "17") (term "1,0,0,1,0"))
                              (rule "replace_known_right" (formula "17") (term "0,0,1,0") (ifseqformula "14"))
                              (rule "ifthenelse_false" (formula "17") (term "0,1,0"))
                              (rule "ifElseSplit" (formula "17"))
                              (branch "if x_7 true"
                                 (rule "simplifyUpdate2" (formula "18"))
                                 (rule "simplifyUpdate2" (formula "1"))
                                 (rule "applyOnRigidFormula" (formula "1"))
                                 (rule "applyOnPV" (formula "1") (term "0"))
                                 (rule "simplifyUpdate1" (formula "1") (term "1"))
                                 (rule "boolean_not_equal_2" (formula "1"))
                                 (rule "closeFalse" (formula "1"))
                              )
                              (branch "if x_7 false"
                                 (rule "false_to_not_true" (formula "1") (term "1"))
                                 (rule "simplifyUpdate2" (formula "18"))
                                 (rule "simplifyUpdate2" (formula "1"))
                                 (rule "notLeft" (formula "1"))
                                 (rule "applyOnRigidFormula" (formula "12"))
                                 (rule "applyOnPV" (formula "12") (term "0"))
                                 (rule "simplifyUpdate1" (formula "12") (term "1"))
                                 (rule "boolean_not_equal_2" (formula "12"))
                                 (rule "false_right" (formula "12"))
                                 (rule "ifElseSplit" (formula "17"))
                                 (branch "if thrownExc instanceof java.lang.Throwable true"
                                    (rule "instanceof_static_type" (formula "1") (term "2,0,1"))
                                    (rule "ifthenelse_concrete4" (formula "1") (term "1"))
                                    (rule "boolean_not_equal_2" (formula "1") (term "1,1"))
                                    (rule "concrete_or_4" (formula "1") (term "1"))
                                    (rule "simplifyUpdate2" (formula "1"))
                                    (rule "notLeft" (formula "1"))
                                    (rule "applyOnRigidFormula" (formula "12"))
                                    (rule "simplifyUpdate1" (formula "12") (term "1"))
                                    (rule "applyOnPV" (formula "12") (term "0"))
                                    (rule "variableDeclaration" (formula "17") (term "1") (newnames "e_1"))
                                    (rule "reference_type_cast" (formula "17") (term "1"))
                                    (branch "Normal Execution (thrownExc instanceof java.lang.Throwable)"
                                       (rule "instanceof_static_type" (formula "1") (term "0,1,1"))
                                       (rule "boolean_equal" (formula "1") (term "1,1"))
                                       (rule "concrete_or_3" (formula "1") (term "1"))
                                       (rule "true_left" (formula "1"))
                                       (rule "sequentialToParallel2" (formula "17"))
                                       (rule "simplifyUpdate2" (formula "17"))
                                       (rule "simplifyUpdate3" (formula "17") (term "1,0"))
                                       (rule "applyOnElementary" (formula "17") (term "1,0"))
                                       (rule "applyOnPV" (formula "17") (term "0,1,0"))
                                       (rule "assignment" (formula "17") (term "1"))
                                       (rule "sequentialToParallel2" (formula "17"))
                                       (rule "simplifyUpdate2" (formula "17"))
                                       (rule "simplifyUpdate3" (formula "17") (term "1,0"))
                                       (rule "applyOnElementary" (formula "17") (term "1,0"))
                                       (rule "applyOnPV" (formula "17") (term "0,1,0"))
                                       (rule "emptyModality" (formula "17") (term "1"))
                                       (rule "applyOnRigidFormula" (formula "17"))
                                       (rule "applyOnRigidFormula" (formula "17") (term "1"))
                                       (rule "simplifyUpdate2" (formula "17") (term "0,1"))
                                       (rule "applyOnRigidFormula" (formula "17") (term "0"))
                                       (rule "simplifyUpdate2" (formula "17") (term "0,0"))
                                       (rule "simplifyUpdate2" (formula "17") (term "1,0"))
                                       (rule "applyOnRigidFormula" (formula "17") (term "1,1"))
                                       (rule "simplifyUpdate2" (formula "17") (term "1,1,1"))
                                       (rule "simplifyUpdate2" (formula "17") (term "0,1,1"))
                                       (rule "applyOnRigidFormula" (formula "17") (term "0,1"))
                                       (rule "applyOnRigidFormula" (formula "17") (term "0,0"))
                                       (rule "simplifyUpdate1" (formula "17") (term "1,0,0"))
                                       (rule "applyOnPV" (formula "17") (term "0,0,0"))
                                       (rule "replace_known_right" (formula "17") (term "0,0") (ifseqformula "14"))
                                       (rule "concrete_impl_2" (formula "17") (term "0"))
                                       (rule "concrete_and_1" (formula "17"))
                                       (rule "impRight" (formula "17"))
                                       (rule "notLeft" (formula "1"))
                                       (rule "applyOnRigidFormula" (formula "18") (term "1"))
                                       (rule "applyOnRigidFormula" (formula "18") (term "0"))
                                       (rule "applyOnPV" (formula "18") (term "0,0"))
                                       (rule "simplifyUpdate1" (formula "18") (term "1,0"))
                                       (rule "applyOnRigidFormula" (formula "12"))
                                       (rule "simplifyUpdate1" (formula "12") (term "1"))
                                       (rule "applyOnPV" (formula "12") (term "0"))
                                       (rule "applyOnRigidFormula" (formula "17") (term "0,1"))
                                       (rule "simplifyUpdate1" (formula "17") (term "1,0,1"))
                                       (rule "applyOnRigidFormula" (formula "17") (term "1,1"))
                                       (rule "simplifyUpdate1" (formula "17") (term "1,1,1"))
                                       (rule "applyOnRigidTerm" (formula "17") (term "0,0,1"))
                                       (rule "applyOnPV" (formula "17") (term "0,0,0,1"))
                                       (rule "instanceof_not_compatible" (formula "17") (term "0,1"))
                                       (rule "replace_known_right" (formula "17") (term "0,1") (ifseqformula "14"))
                                       (rule "concrete_or_2" (formula "17") (term "1"))
                                       (rule "applyOnRigidTerm" (formula "17") (term "0,1"))
                                       (rule "applyOnPV" (formula "17") (term "0,0,1"))
                                       (rule "instanceof_static_type" (formula "17") (term "0,1"))
                                       (rule "boolean_equal" (formula "17") (term "1"))
                                       (rule "concrete_and_3" (formula "17"))
                                       (rule "Class_invariant_axiom_for_Cicli" (formula "17") (inst "sk=sk_2") (ifseqformula "7"))
                                       (branch "Use Axiom"
                                          (rule "closeTrue" (formula "17"))
                                       )
                                       (branch "Show Axiom Satisfiability"
                                          (rule "concrete_eq_2" (formula "17") (term "1"))
                                          (rule "concrete_eq_1" (formula "17") (term "0"))
                                          (rule "concrete_or_1" (formula "17"))
                                          (rule "closeTrue" (formula "17"))
                                       )
                                    )
                                    (branch "ClassCastException (!(thrownExc instanceof java.lang.Throwable))"
                                       (rule "instanceof_static_type" (formula "17") (term "0,1,1"))
                                       (rule "boolean_equal" (formula "17") (term "1,1"))
                                       (rule "concrete_or_3" (formula "17") (term "1"))
                                       (rule "closeTrue" (formula "17"))
                                    )
                                 )
                                 (branch "if thrownExc instanceof java.lang.Throwable false"
                                    (rule "instanceof_static_type" (formula "1") (term "2,0,1"))
                                    (rule "false_to_not_true" (formula "1") (term "1"))
                                    (rule "ifthenelse_concrete4" (formula "1") (term "0,1"))
                                    (rule "boolean_not_equal_2" (formula "1") (term "1,0,1"))
                                    (rule "concrete_or_4" (formula "1") (term "0,1"))
                                    (rule "double_not" (formula "1") (term "1"))
                                    (rule "simplifyUpdate2" (formula "1"))
                                    (rule "applyOnRigidFormula" (formula "1"))
                                    (rule "applyOnPV" (formula "1") (term "0"))
                                    (rule "simplifyUpdate1" (formula "1") (term "1"))
                                    (rule "close" (formula "15") (ifseqformula "1"))
                                 )
                              )
                           )
                           (branch "ClassCastException (!(a_1 instanceof java.lang.Throwable))"
                              (rule "instanceof_static_type" (formula "17") (term "0,1,1"))
                              (rule "boolean_equal" (formula "17") (term "1,1"))
                              (rule "concrete_or_3" (formula "17") (term "1"))
                              (rule "closeTrue" (formula "17"))
                           )
                        )
                        (branch "if a_1 instanceof java.lang.Throwable false"
                           (rule "instanceof_static_type" (formula "1") (term "2,0,1"))
                           (rule "false_to_not_true" (formula "1") (term "1"))
                           (rule "ifthenelse_concrete4" (formula "1") (term "0,1"))
                           (rule "boolean_not_equal_2" (formula "1") (term "1,0,1"))
                           (rule "concrete_or_4" (formula "1") (term "0,1"))
                           (rule "double_not" (formula "1") (term "1"))
                           (rule "simplifyUpdate2" (formula "1"))
                           (rule "applyOnRigidFormula" (formula "1"))
                           (rule "applyOnPV" (formula "1") (term "0"))
                           (rule "simplifyUpdate1" (formula "1") (term "1"))
                           (rule "close" (formula "15") (ifseqformula "1"))
                        )
                     )
                  )
                  (branch "Null Reference (a_2 = null)"
                     (rule "simplifyUpdate2" (formula "1"))
                     (rule "applyOnRigidFormula" (formula "1"))
                     (rule "applyOnPV" (formula "1") (term "0"))
                     (rule "simplifyUpdate1" (formula "1") (term "1"))
                     (rule "close" (formula "15") (ifseqformula "1"))
                  )
               )
            )
            (branch "if x_4 false"
               (rule "false_to_not_true" (formula "1") (term "1"))
               (rule "simplifyUpdate2" (formula "12"))
               (rule "simplifyUpdate2" (formula "1"))
               (rule "notLeft" (formula "1"))
               (rule "applyOnRigidFormula" (formula "9"))
               (rule "applyOnPV" (formula "9") (term "0"))
               (rule "simplifyUpdate1" (formula "9") (term "1"))
               (rule "boolean_equal" (formula "9"))
               (rule "closeTrue" (formula "9"))
            )
         )
         (branch "Null Reference (_a = null)"
            (rule "simplifyUpdate2" (formula "1"))
            (rule "applyOnRigidFormula" (formula "1"))
            (rule "applyOnPV" (formula "1") (term "0"))
            (rule "simplifyUpdate1" (formula "1") (term "1"))
            (rule "close" (formula "11") (ifseqformula "1"))
         )
      )
      (branch "Null Reference (_a = null)"
         (rule "simplifyUpdate2" (formula "1"))
         (rule "simplifyUpdate2" (formula "9"))
         (rule "applyOnRigidFormula" (formula "1"))
         (rule "applyOnPV" (formula "1") (term "0"))
         (rule "simplifyUpdate1" (formula "1") (term "1"))
         (rule "close" (formula "11") (ifseqformula "1"))
      )
   )
   (branch "Use Case"
      (rule "false_to_not_true" (formula "10") (term "0,0,1,1"))
      (rule "inInt" (formula "7") (term "1,1,1"))
      (rule "concrete_and_3" (formula "7") (term "1,1"))
      (rule "inInt" (formula "7") (term "1,0,0,1,1"))
      (rule "concrete_and_3" (formula "7") (term "0,0,1,1"))
      (rule "simplifyUpdate2" (formula "7"))
      (rule "sequentialToParallel2" (formula "10"))
      (rule "simplifyUpdate2" (formula "10"))
      (rule "simplifyUpdate3" (formula "10") (term "1,0"))
      (rule "sequentialToParallel2" (formula "7"))
      (rule "simplifyUpdate2" (formula "7"))
      (rule "simplifyUpdate3" (formula "7") (term "1,0"))
      (rule "applyOnRigidFormula" (formula "7"))
      (rule "applyOnRigidFormula" (formula "7") (term "0"))
      (rule "simplifyUpdate2" (formula "7") (term "1,0"))
      (rule "simplifyUpdate2" (formula "7") (term "0,0"))
      (rule "applyOnRigidFormula" (formula "7") (term "1,0"))
      (rule "simplifyUpdate1" (formula "7") (term "1,1,0"))
      (rule "applyOnRigidFormula" (formula "7") (term "0,0"))
      (rule "simplifyUpdate2" (formula "7") (term "0,0,0"))
      (rule "applyOnRigidTerm" (formula "7") (term "0,1,0"))
      (rule "simplifyUpdate1" (formula "7") (term "1,0,1,0"))
      (rule "simplifyUpdate1" (formula "7") (term "0,0,1,0"))
      (rule "simplifyUpdate1" (formula "7") (term "2,0,1,0"))
      (rule "applyOnPV" (formula "7") (term "1,0,1,0"))
      (rule "applyOnPV" (formula "7") (term "0,0,1,0"))
      (rule "applyOnRigidFormula" (formula "7") (term "1,0,0"))
      (rule "simplifyUpdate1" (formula "7") (term "0,1,0,0"))
      (rule "applyOnPV" (formula "7") (term "1,1,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "7") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1,0,0"))
      (rule "variableDeclarationAssign" (formula "10") (term "1"))
      (rule "variableDeclaration" (formula "10") (term "1") (newnames "b_1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "7") (term "1,1,0,0"))
      (rule "polySimp_rightDist" (formula "7") (term "1,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,0,0"))
      (rule "mul_literals" (formula "7") (term "0,1,1,0,0"))
      (rule "polySimp_elimOne" (formula "7") (term "1,1,1,0,0"))
      (rule "nnf_imp2or" (formula "7") (term "0"))
      (rule "nnf_notAnd" (formula "7") (term "0,0"))
      (rule "inEqSimp_notGeq" (formula "7") (term "0,0,0"))
      (rule "times_zero_1" (formula "7") (term "1,0,0,0,0,0"))
      (rule "add_zero_right" (formula "7") (term "0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "0,0,0"))
      (rule "mul_literals" (formula "7") (term "1,0,0,0"))
      (rule "inEqSimp_notLeq" (formula "7") (term "1,0,0"))
      (rule "polySimp_rightDist" (formula "7") (term "1,0,0,1,0,0"))
      (rule "mul_literals" (formula "7") (term "0,1,0,0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "7") (term "0,0,1,0,0"))
      (rule "add_literals" (formula "7") (term "0,0,0,1,0,0"))
      (rule "add_zero_left" (formula "7") (term "0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "7") (term "1,0,0"))
      (rule "polySimp_mulLiterals" (formula "7") (term "1,1,0,0"))
      (rule "polySimp_elimOne" (formula "7") (term "1,1,0,0"))
      (rule "compound_less_than_comparison_2" (formula "10") (term "1") (inst "#v0=x") (inst "#v1=x_1"))
      (rule "variableDeclarationAssign" (formula "10") (term "1"))
      (rule "variableDeclaration" (formula "10") (term "1") (newnames "x"))
      (rule "assignment" (formula "10") (term "1"))
      (rule "sequentialToParallel2" (formula "10"))
      (rule "simplifyUpdate2" (formula "10"))
      (rule "simplifyUpdate3" (formula "10") (term "1,0"))
      (rule "applyOnElementary" (formula "10") (term "1,0"))
      (rule "applyOnPV" (formula "10") (term "0,1,0"))
      (rule "variableDeclarationAssign" (formula "10") (term "1"))
      (rule "variableDeclaration" (formula "10") (term "1") (newnames "x_1"))
      (rule "assignment_read_length" (formula "10") (term "1"))
      (branch "Normal Execution (_a != null)"
         (rule "simplifyUpdate2" (formula "10"))
         (rule "sequentialToParallel2" (formula "11"))
         (rule "simplifyUpdate2" (formula "11"))
         (rule "simplifyUpdate3" (formula "11") (term "1,0"))
         (rule "applyOnElementary" (formula "11") (term "1,0"))
         (rule "applyOnRigidFormula" (formula "10"))
         (rule "applyOnPV" (formula "10") (term "0"))
         (rule "simplifyUpdate1" (formula "10") (term "1"))
         (rule "applyOnRigidTerm" (formula "10") (term "0,1,0"))
         (rule "applyOnPV" (formula "10") (term "0,0,1,0"))
         (rule "less_than_comparison_simple" (formula "10") (term "1"))
         (rule "sequentialToParallel2" (formula "10"))
         (rule "simplifyUpdate2" (formula "10"))
         (rule "simplifyUpdate3" (formula "10") (term "1,0"))
         (rule "applyOnElementary" (formula "10") (term "1,0"))
         (rule "applyOnRigidTerm" (formula "10") (term "0,1,0"))
         (rule "simplifyUpdate1" (formula "10") (term "1,0,1,0"))
         (rule "simplifyUpdate1" (formula "10") (term "2,0,1,0"))
         (rule "applyOnRigidFormula" (formula "10") (term "0,0,1,0"))
         (rule "simplifyUpdate1" (formula "10") (term "1,0,0,1,0"))
         (rule "simplifyUpdate1" (formula "10") (term "0,0,0,1,0"))
         (rule "applyOnPV" (formula "10") (term "1,0,0,1,0"))
         (rule "applyOnPV" (formula "10") (term "0,0,0,1,0"))
         (rule "inEqSimp_ltToLeq" (formula "10") (term "0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,0,1,0"))
         (rule "polySimp_addComm1" (formula "10") (term "0,0,0,1,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "10") (term "0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "10") (term "0,0,0,1,0"))
         (rule "polySimp_elimOne" (formula "10") (term "0,0,0,1,0"))
         (rule "methodCallEmpty" (formula "10") (term "1"))
         (rule "emptyModality" (formula "10") (term "1"))
         (rule "impRight" (formula "10"))
         (rule "simplifyUpdate2" (formula "1"))
         (rule "simplifyUpdate2" (formula "11"))
         (rule "notLeft" (formula "1"))
         (rule "applyOnRigidFormula" (formula "8"))
         (rule "applyOnPV" (formula "8") (term "0"))
         (rule "simplifyUpdate1" (formula "8") (term "1"))
         (rule "ifthenelse_concrete3" (formula "8"))
         (rule "boolean_not_equal_2" (formula "8") (term "1"))
         (rule "concrete_or_4" (formula "8"))
         (rule "inEqSimp_geqRight" (formula "8"))
         (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
         (rule "mul_literals" (formula "1") (term "0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
         (rule "add_literals" (formula "1") (term "0,0,0"))
         (rule "add_zero_left" (formula "1") (term "0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "1"))
         (rule "polySimp_mulLiterals" (formula "1") (term "1"))
         (rule "polySimp_elimOne" (formula "1") (term "1"))
         (rule "methodCallEmpty" (formula "11") (term "1"))
         (rule "tryEmpty" (formula "11") (term "1"))
         (rule "emptyModality" (formula "11") (term "1"))
         (rule "applyOnRigidFormula" (formula "11"))
         (rule "applyOnRigidFormula" (formula "11") (term "0"))
         (rule "simplifyUpdate2" (formula "11") (term "0,0"))
         (rule "simplifyUpdate2" (formula "11") (term "1,0"))
         (rule "applyOnRigidFormula" (formula "11") (term "1"))
         (rule "simplifyUpdate2" (formula "11") (term "0,1"))
         (rule "applyOnRigidFormula" (formula "11") (term "0,0"))
         (rule "applyOnPV" (formula "11") (term "0,0,0"))
         (rule "simplifyUpdate1" (formula "11") (term "1,0,0"))
         (rule "eqClose" (formula "11") (term "0,0"))
         (rule "concrete_impl_1" (formula "11") (term "0"))
         (rule "applyOnRigidFormula" (formula "11") (term "1,1"))
         (rule "simplifyUpdate2" (formula "11") (term "0,1,1"))
         (rule "simplifyUpdate2" (formula "11") (term "1,1,1"))
         (rule "applyOnRigidFormula" (formula "11") (term "0,1"))
         (rule "applyOnRigidFormula" (formula "11") (term "0"))
         (rule "applyOnRigidFormula" (formula "11") (term "0,1,1"))
         (rule "simplifyUpdate1" (formula "11") (term "1,0,1,1"))
         (rule "applyOnPV" (formula "11") (term "0,0,1,1"))
         (rule "applyOnRigidFormula" (formula "11") (term "1,1,1"))
         (rule "applyOnRigidFormula" (formula "11") (term "0,0,1"))
         (rule "simplifyUpdate1" (formula "11") (term "1,0,0,1"))
         (rule "applyOnPV" (formula "11") (term "0,0,0,1"))
         (rule "eqClose" (formula "11") (term "0,0,1"))
         (rule "concrete_not_1" (formula "11") (term "0,1"))
         (rule "concrete_impl_2" (formula "11") (term "1"))
         (rule "concrete_and_3" (formula "11"))
         (rule "applyOnRigidFormula" (formula "11") (term "0"))
         (rule "applyOnRigidFormula" (formula "11") (term "1"))
         (rule "simplifyUpdate1" (formula "11") (term "1,1"))
         (rule "applyOnPV" (formula "11") (term "0,1"))
         (rule "applyOnRigidFormula" (formula "11") (term "0,0"))
         (rule "simplifyUpdate2" (formula "11") (term "0,0,0"))
         (rule "applyOnRigidFormula" (formula "11") (term "1,0,0"))
         (rule "simplifyUpdate1" (formula "11") (term "1,1,0,0"))
         (rule "applyOnRigidTerm" (formula "11") (term "0,1,0,0"))
         (rule "applyOnPV" (formula "11") (term "0,0,1,0,0"))
         (rule "simplifyUpdate1" (formula "11") (term "1,0,1,0,0"))
         (rule "simplifyUpdate1" (formula "11") (term "2,0,1,0,0"))
         (rule "Class_invariant_axiom_for_Cicli" (formula "11") (term "1") (inst "sk=sk_1") (ifseqformula "4"))
         (branch "Use Axiom"
            (rule "concrete_and_3" (formula "11"))
            (rule "allRight" (formula "11") (inst "sk=i_1"))
            (rule "orRight" (formula "11"))
            (rule "orRight" (formula "11"))
            (rule "inEqSimp_leqRight" (formula "11"))
            (rule "mul_literals" (formula "1") (term "1,0,0"))
            (rule "add_literals" (formula "1") (term "0,0"))
            (rule "add_zero_left" (formula "1") (term "0"))
            (rule "inEqSimp_geqRight" (formula "12"))
            (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
            (rule "polySimp_addComm1" (formula "1") (term "0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "1"))
            (rule "polySimp_mulLiterals" (formula "1") (term "0"))
            (rule "polySimp_elimOne" (formula "1") (term "0"))
            (rule "pullOutSelect" (formula "13") (term "0") (inst "selectSK=arr_0"))
            (rule "simplifySelectOfAnon" (formula "1"))
            (rule "elementOfFreshLocs" (formula "1") (term "1,0,0"))
            (rule "elementOfAllLocs" (formula "1") (term "0,0,0,0"))
            (rule "concrete_and_1" (formula "1") (term "0,0,0"))
            (rule "equalUnique" (formula "1") (term "0,0,0,0"))
            (rule "concrete_not_2" (formula "1") (term "0,0,0"))
            (rule "concrete_or_1" (formula "1") (term "0,0"))
            (rule "ifthenelse_true" (formula "1") (term "0"))
            (rule "applyEqReverse" (formula "14") (term "0") (ifseqformula "1"))
            (rule "hideAuxiliaryEq" (formula "1"))
            (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "3"))
            (rule "polySimp_rightDist" (formula "1") (term "0,0"))
            (rule "mul_literals" (formula "1") (term "0,0,0"))
            (rule "polySimp_addComm1" (formula "1") (term "0"))
            (rule "inEqSimp_sepNegMonomial1" (formula "1"))
            (rule "polySimp_mulLiterals" (formula "1") (term "0"))
            (rule "polySimp_elimOne" (formula "1") (term "0"))
            (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "1"))
            (rule "times_zero_1" (formula "3") (term "0,0"))
            (rule "add_zero_left" (formula "3") (term "0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "3"))
            (rule "mul_literals" (formula "3") (term "1"))
            (rule "allLeft" (formula "12") (inst "t=i_1"))
            (rule "replaceKnownSelect_taclet0020_0" (formula "12") (term "0,1"))
            (rule "replaceKnownAuxiliaryConstant_taclet0020_1" (formula "12") (term "0,1"))
            (rule "replace_known_right" (formula "12") (term "1") (ifseqformula "16"))
            (rule "concrete_or_4" (formula "12"))
            (rule "inEqSimp_contradInEq1" (formula "12") (term "0") (ifseqformula "4"))
            (rule "qeq_literals" (formula "12") (term "0,0"))
            (rule "concrete_and_2" (formula "12") (term "0"))
            (rule "concrete_or_2" (formula "12"))
            (rule "inEqSimp_contradInEq0" (formula "12") (ifseqformula "1"))
            (rule "andLeft" (formula "12"))
            (rule "inEqSimp_homoInEq1" (formula "12"))
            (rule "polySimp_mulComm0" (formula "12") (term "1,0"))
            (rule "polySimp_rightDist" (formula "12") (term "1,0"))
            (rule "mul_literals" (formula "12") (term "0,1,0"))
            (rule "polySimp_addAssoc" (formula "12") (term "0"))
            (rule "polySimp_addComm0" (formula "12") (term "0,0"))
            (rule "polySimp_pullOutFactor1b" (formula "12") (term "0"))
            (rule "add_literals" (formula "12") (term "1,1,0"))
            (rule "times_zero_1" (formula "12") (term "1,0"))
            (rule "add_literals" (formula "12") (term "0"))
            (rule "leq_literals" (formula "12"))
            (rule "closeFalse" (formula "12"))
         )
         (branch "Show Axiom Satisfiability"
            (rule "concrete_eq_1" (formula "11") (term "0"))
            (rule "concrete_or_1" (formula "11"))
            (rule "closeTrue" (formula "11"))
         )
      )
      (branch "Null Reference (_a = null)"
         (rule "simplifyUpdate2" (formula "1"))
         (rule "simplifyUpdate2" (formula "11"))
         (rule "applyOnRigidFormula" (formula "1"))
         (rule "applyOnPV" (formula "1") (term "0"))
         (rule "simplifyUpdate1" (formula "1") (term "1"))
         (rule "close" (formula "10") (ifseqformula "1"))
      )
   )
)
(branch "Show Axiom Satisfiability"
   (rule "concrete_eq_1" (formula "7") (term "0"))
   (rule "concrete_or_1" (formula "7"))
   (rule "closeTrue" (formula "7"))
)
)

}
